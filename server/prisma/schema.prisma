generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// SQLite doesn't support enums, using String instead

model User {
  id                     Int            @id @default(autoincrement())
  name                   String
  email                  String         @unique
  password               String
  phone                  String?
  country                String?
  degree                 String?
  locale                 String?
  timezone               String?
  avatarUrl              String?
  active                 Boolean        @default(true)
  assignmentEligibility  String?
  roles                  RoleOnUser[]
  leads                  Lead[]         @relation("UserLeads")
  activities             LeadActivity[]
  tasks                  Task[]
  notifications          Notification[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model Role {
  id                     Int            @id @default(autoincrement())
  name                   String         @unique
  canReceiveAssignments  Boolean        @default(false)
  description            String?
  active                 Boolean        @default(true)
  permissions            String?
  users                  RoleOnUser[]
}

model RoleOnUser {
  userId  Int
  roleId  Int
  user    User @relation(fields: [userId], references: [id])
  role    Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Lead {
  id               Int           @id @default(autoincrement())
  full_name        String
  email            String?
  phone            String?
  nationality      String?
  residence_country String?
  city             String?
  gender           String?
  program          String?
  degree           String?
  source           String?
  stage            String        @default("new")
  status           String        @default("open")
  assignee         User?         @relation("UserLeads", fields: [assigneeId], references: [id])
  assigneeId       Int?
  activities       LeadActivity[]
  tasks            Task[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model LeadActivity {
  id        Int      @id @default(autoincrement())
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  method    String?
  outcome   String?
  notes     String?
  fromStage String?
  toStage   String?
  createdAt DateTime @default(now())
}

model Task {
  id         Int      @id @default(autoincrement())
  lead       Lead     @relation(fields: [leadId], references: [id])
  leadId     Int
  assignee   User?    @relation(fields: [assigneeId], references: [id])
  assigneeId Int?
  title      String
  type       String?
  dueDate    DateTime?
  done       Boolean  @default(false)
  outcome    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  message   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

